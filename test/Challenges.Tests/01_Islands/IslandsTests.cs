using Challenges._01_Islands;
using Xunit;

namespace Challenges.Tests._01_Islands;

public class TestMaps : TheoryData<int, string[,]>
{
    public TestMaps()
    {
        Add(0,
            new[,]
            {
                { "0" }
            });
        Add(1,
            new[,]
            {
                { "1" }
            });
        Add(1,
            new[,]
            {
                { "0", "0" },
                { "1", "0" }
            });
        Add(2,
            new[,]
            {
                { "0", "1" },
                { "1", "0" }
            });
        Add(1,
            new[,]
            {
                { "1", "1", "1", "1", "0" },
                { "1", "1", "0", "1", "0" },
                { "1", "1", "0", "0", "0" },
                { "0", "0", "0", "0", "0" }
            });
        Add(3,
            new[,]
            {
                { "1", "1", "0", "0", "0" },
                { "1", "1", "0", "0", "0" },
                { "0", "0", "1", "0", "0" },
                { "0", "0", "0", "1", "1" }
            });
        Add(4,
            new[,]
            {
                { "0", "0", "0", "0", "0", "0", "1", "1" },
                { "0", "1", "0", "0", "1", "0", "0", "1" },
                { "1", "1", "0", "1", "1", "1", "0", "0" },
                { "0", "0", "0", "1", "0", "1", "0", "0" },
                { "1", "0", "1", "1", "1", "1", "0", "0" },
                { "1", "0", "0", "0", "0", "0", "0", "0" },
                { "1", "0", "0", "0", "0", "0", "0", "0" },
                { "0", "0", "0", "0", "0", "0", "0", "0" }
            });
        Add(1,
            new[,]
            {
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" },
                { "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1" }
            });
    }
}

public class IslandsTests
{
    [Theory]
    [ClassData(typeof(TestMaps))]
    public void CountIslandsUsingDfsCounter(int expectedNumberOfIslands, string[,] map)
    {
        Assert.Equal(expectedNumberOfIslands, IslandsDfsCounter.CountIslands(map));
    }

    [Theory]
    [ClassData(typeof(TestMaps))]
    public void CountIslandsUsingBfsCounter(int expectedNumberOfIslands, string[,] map)
    {
        Assert.Equal(expectedNumberOfIslands, IslandsBfsCounter.CountIslands(map));
    }
}